
output/source.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  0000024c  2**0
                  ALLOC
  2 .stab         000006b4  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000050  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000008a  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004a4  00000000  00000000  00000a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a3  00000000  00000000  00000ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000548  00000000  00000000  00001075  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000142  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010e  00000000  00000000  00001782  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	OCR1A = __OCR1A;
	/* enable COMPA isr */
	TIMSK |= _BV(OCIE1A);
	/* restore SREG with global interrupt flag */
	SREG = _sreg;
}
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__vector_4>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e8 ed       	ldi	r30, 0xD8	; 216
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a0 36       	cpi	r26, 0x60	; 96
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a0 e6       	ldi	r26, 0x60	; 96
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a8 36       	cpi	r26, 0x68	; 104
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	62 d0       	rcall	.+196    	; 0x11a <main>
  56:	be c0       	rjmp	.+380    	; 0x1d4 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <__vector_4>:

ISR(TIMER1_COMPA_vect)
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	2f 93       	push	r18
  66:	3f 93       	push	r19
  68:	4f 93       	push	r20
  6a:	8f 93       	push	r24
  6c:	9f 93       	push	r25
{				/* Framebuffer interrupt routine */

	uint8_t pwm_cycle;

	__DISPLAY_ON;		// only enable the drivers when we actually have time to talk to them
  6e:	c1 98       	cbi	0x18, 1	; 24
  70:	20 e0       	ldi	r18, 0x00	; 0
Functions dealing with hardware specific jobs / settings
*/

uint8_t spi_transfer(uint8_t data) {
  USIDR = data;
  USISR = _BV(USIOIF); // clear flag
  72:	40 e4       	ldi	r20, 0x40	; 64

  while ( (USISR & _BV(USIOIF)) == 0 ) {
   USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
  74:	3b e1       	ldi	r19, 0x1B	; 27

		uint8_t led;
		uint8_t red = 0x00;	// off

		for (led = 0; led <= 7; led++) {
			if ( pwm_cycle < brightness[led] ) {
  76:	80 91 60 00 	lds	r24, 0x0060
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	28 17       	cp	r18, r24
  7e:	08 f4       	brcc	.+2      	; 0x82 <__vector_4+0x28>
  80:	91 e0       	ldi	r25, 0x01	; 1
  82:	80 91 61 00 	lds	r24, 0x0061
  86:	28 17       	cp	r18, r24
  88:	08 f4       	brcc	.+2      	; 0x8c <__vector_4+0x32>
  8a:	45 c0       	rjmp	.+138    	; 0x116 <__stack+0x37>
				red |= _BV(led);
			}
			else {
				red &= ~_BV(led);
  8c:	9d 7f       	andi	r25, 0xFD	; 253

		uint8_t led;
		uint8_t red = 0x00;	// off

		for (led = 0; led <= 7; led++) {
			if ( pwm_cycle < brightness[led] ) {
  8e:	80 91 62 00 	lds	r24, 0x0062
  92:	28 17       	cp	r18, r24
  94:	f0 f1       	brcs	.+124    	; 0x112 <__stack+0x33>
				red |= _BV(led);
			}
			else {
				red &= ~_BV(led);
  96:	9b 7f       	andi	r25, 0xFB	; 251

		uint8_t led;
		uint8_t red = 0x00;	// off

		for (led = 0; led <= 7; led++) {
			if ( pwm_cycle < brightness[led] ) {
  98:	80 91 63 00 	lds	r24, 0x0063
  9c:	28 17       	cp	r18, r24
  9e:	b8 f1       	brcs	.+110    	; 0x10e <__stack+0x2f>
				red |= _BV(led);
			}
			else {
				red &= ~_BV(led);
  a0:	97 7f       	andi	r25, 0xF7	; 247

		uint8_t led;
		uint8_t red = 0x00;	// off

		for (led = 0; led <= 7; led++) {
			if ( pwm_cycle < brightness[led] ) {
  a2:	80 91 64 00 	lds	r24, 0x0064
  a6:	28 17       	cp	r18, r24
  a8:	80 f1       	brcs	.+96     	; 0x10a <__stack+0x2b>
				red |= _BV(led);
			}
			else {
				red &= ~_BV(led);
  aa:	9f 7e       	andi	r25, 0xEF	; 239

		uint8_t led;
		uint8_t red = 0x00;	// off

		for (led = 0; led <= 7; led++) {
			if ( pwm_cycle < brightness[led] ) {
  ac:	80 91 65 00 	lds	r24, 0x0065
  b0:	28 17       	cp	r18, r24
  b2:	48 f1       	brcs	.+82     	; 0x106 <__stack+0x27>
				red |= _BV(led);
			}
			else {
				red &= ~_BV(led);
  b4:	9f 7d       	andi	r25, 0xDF	; 223

		uint8_t led;
		uint8_t red = 0x00;	// off

		for (led = 0; led <= 7; led++) {
			if ( pwm_cycle < brightness[led] ) {
  b6:	80 91 66 00 	lds	r24, 0x0066
  ba:	28 17       	cp	r18, r24
  bc:	10 f1       	brcs	.+68     	; 0x102 <__stack+0x23>
				red |= _BV(led);
			}
			else {
				red &= ~_BV(led);
  be:	9f 7b       	andi	r25, 0xBF	; 191

		uint8_t led;
		uint8_t red = 0x00;	// off

		for (led = 0; led <= 7; led++) {
			if ( pwm_cycle < brightness[led] ) {
  c0:	80 91 67 00 	lds	r24, 0x0067
  c4:	28 17       	cp	r18, r24
  c6:	d0 f4       	brcc	.+52     	; 0xfc <__stack+0x1d>
				red |= _BV(led);
  c8:	89 2f       	mov	r24, r25
  ca:	80 68       	ori	r24, 0x80	; 128
			else {
				red &= ~_BV(led);
			}
		}

		__LATCH_LOW;
  cc:	c4 98       	cbi	0x18, 4	; 24
/*
Functions dealing with hardware specific jobs / settings
*/

uint8_t spi_transfer(uint8_t data) {
  USIDR = data;
  ce:	8f b9       	out	0x0f, r24	; 15
  USISR = _BV(USIOIF); // clear flag
  d0:	4e b9       	out	0x0e, r20	; 14

  while ( (USISR & _BV(USIOIF)) == 0 ) {
  d2:	76 99       	sbic	0x0e, 6	; 14
  d4:	03 c0       	rjmp	.+6      	; 0xdc <__vector_4+0x82>
   USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
  d6:	3d b9       	out	0x0d, r19	; 13

uint8_t spi_transfer(uint8_t data) {
  USIDR = data;
  USISR = _BV(USIOIF); // clear flag

  while ( (USISR & _BV(USIOIF)) == 0 ) {
  d8:	76 9b       	sbis	0x0e, 6	; 14
  da:	fd cf       	rjmp	.-6      	; 0xd6 <__vector_4+0x7c>
   USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
  }
  return USIDR;
  dc:	8f b1       	in	r24, 0x0f	; 15
			}
		}

		__LATCH_LOW;
		spi_transfer(red);
		__LATCH_HIGH;
  de:	c4 9a       	sbi	0x18, 4	; 24
{				/* Framebuffer interrupt routine */

	uint8_t pwm_cycle;

	__DISPLAY_ON;		// only enable the drivers when we actually have time to talk to them
	for (pwm_cycle = 0; pwm_cycle <= __pwm_loop_max; pwm_cycle++) {
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	20 38       	cpi	r18, 0x80	; 128
  e4:	41 f6       	brne	.-112    	; 0x76 <__vector_4+0x1c>
		__LATCH_LOW;
		spi_transfer(red);
		__LATCH_HIGH;

	}
	__DISPLAY_OFF;		// we're done with this line, turn the driver's off until next time
  e6:	c1 9a       	sbi	0x18, 1	; 24
}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti
		for (led = 0; led <= 7; led++) {
			if ( pwm_cycle < brightness[led] ) {
				red |= _BV(led);
			}
			else {
				red &= ~_BV(led);
  fc:	89 2f       	mov	r24, r25
  fe:	8f 77       	andi	r24, 0x7F	; 127
 100:	e5 cf       	rjmp	.-54     	; 0xcc <__vector_4+0x72>
		uint8_t led;
		uint8_t red = 0x00;	// off

		for (led = 0; led <= 7; led++) {
			if ( pwm_cycle < brightness[led] ) {
				red |= _BV(led);
 102:	90 64       	ori	r25, 0x40	; 64
 104:	dd cf       	rjmp	.-70     	; 0xc0 <__vector_4+0x66>
 106:	90 62       	ori	r25, 0x20	; 32
 108:	d6 cf       	rjmp	.-84     	; 0xb6 <__vector_4+0x5c>
 10a:	90 61       	ori	r25, 0x10	; 16
 10c:	cf cf       	rjmp	.-98     	; 0xac <__vector_4+0x52>
 10e:	98 60       	ori	r25, 0x08	; 8
 110:	c8 cf       	rjmp	.-112    	; 0xa2 <__vector_4+0x48>
 112:	94 60       	ori	r25, 0x04	; 4
 114:	c1 cf       	rjmp	.-126    	; 0x98 <__vector_4+0x3e>
 116:	92 60       	ori	r25, 0x02	; 2
 118:	ba cf       	rjmp	.-140    	; 0x8e <__vector_4+0x34>

0000011a <main>:
	PORTB &= ~_BV(PB0); // off again
	for(;;) {} // stop here
};

void setup(void) {
  DDRB |= _BV(PB0); // set LED pin as output
 11a:	b8 9a       	sbi	0x17, 0	; 23
  DDRB |= _BV(PB1); // display enable pin as output
 11c:	b9 9a       	sbi	0x17, 1	; 23
  PORTB |= _BV(PB1); // pullup on
 11e:	c1 9a       	sbi	0x18, 1	; 24
  
  // USI stuff
  
  DDRB |= _BV(PB6); // as output (DO)
 120:	be 9a       	sbi	0x17, 6	; 23
  DDRB |= _BV(PB7); // as output (USISCK)
 122:	bf 9a       	sbi	0x17, 7	; 23
  DDRB &= ~_BV(PB5); // as input (DI)
 124:	bd 98       	cbi	0x17, 5	; 23
  PORTB |= _BV(PB5); // pullup on (DI)
 126:	c5 9a       	sbi	0x18, 5	; 24

  sei(); // turn global irq flag on
 128:	78 94       	sei
  return USIDR;
}

void setup_timer1_ctc(void)
{
	uint8_t _sreg = SREG;	/* save SREG */
 12a:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* disable all interrupts while messing with the register setup */
 12c:	f8 94       	cli

	/* multiplexed TRUE-RGB PWM mode (quite dim) */
	/* set prescaler to 256 */
	TCCR1B |= (_BV(CS12));
 12e:	8e b5       	in	r24, 0x2e	; 46
 130:	84 60       	ori	r24, 0x04	; 4
 132:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(_BV(CS11) | _BV(CS10));
 134:	8e b5       	in	r24, 0x2e	; 46
 136:	8c 7f       	andi	r24, 0xFC	; 252
 138:	8e bd       	out	0x2e, r24	; 46
	/* set WGM mode 4: CTC using OCR1A */
	TCCR1A &= ~(_BV(WGM11) | _BV(WGM10));
 13a:	8f b5       	in	r24, 0x2f	; 47
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= _BV(WGM12);
 140:	8e b5       	in	r24, 0x2e	; 46
 142:	88 60       	ori	r24, 0x08	; 8
 144:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~_BV(WGM13);
 146:	8e b5       	in	r24, 0x2e	; 46
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	8e bd       	out	0x2e, r24	; 46
	/* normal operation - disconnect PWM pins */
	TCCR1A &= ~(_BV(COM1A1) | _BV(COM1A0) | _BV(COM1B1) | _BV(COM1B0));
 14c:	8f b5       	in	r24, 0x2f	; 47
 14e:	8f 70       	andi	r24, 0x0F	; 15
 150:	8f bd       	out	0x2f, r24	; 47
	/* set top value for TCNT1 */
	OCR1A = __OCR1A;
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	9b bd       	out	0x2b, r25	; 43
 158:	8a bd       	out	0x2a, r24	; 42
	/* enable COMPA isr */
	TIMSK |= _BV(OCIE1A);
 15a:	89 b7       	in	r24, 0x39	; 57
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	89 bf       	out	0x39, r24	; 57
	/* restore SREG with global interrupt flag */
	SREG = _sreg;
 160:	2f bf       	out	0x3f, r18	; 63
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
}

void current_calib(void) {
  uint8_t ctr1;
  for(ctr1 = 0; ctr1 <= 7; ctr1++) {
    brightness[ctr1] = 255;
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	fc 01       	movw	r30, r24
 16a:	e0 5a       	subi	r30, 0xA0	; 160
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	20 83       	st	Z, r18
 170:	01 96       	adiw	r24, 0x01	; 1
  current_calib();
}

void current_calib(void) {
  uint8_t ctr1;
  for(ctr1 = 0; ctr1 <= 7; ctr1++) {
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	91 05       	cpc	r25, r1
 176:	c1 f7       	brne	.-16     	; 0x168 <main+0x4e>
    brightness[ctr1] = 255;
  }
  PORTB |= _BV(PB0);
 178:	c0 9a       	sbi	0x18, 0	; 24
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 17e:	40 ed       	ldi	r20, 0xD0	; 208
 180:	57 e0       	ldi	r21, 0x07	; 7
 182:	ca 01       	movw	r24, r20
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x6a>
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
  PORTB &= ~_BV(PB0);
}

void __delay_ms(uint16_t ms) {
  uint16_t ctr1;
  for(ctr1 = 0; ctr1 < ms; ctr1++ ){
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	20 39       	cpi	r18, 0x90	; 144
 190:	38 07       	cpc	r19, r24
 192:	b9 f7       	brne	.-18     	; 0x182 <main+0x68>
  for(ctr1 = 0; ctr1 <= 7; ctr1++) {
    brightness[ctr1] = 255;
  }
  PORTB |= _BV(PB0);
  __delay_ms(400);
  PORTB &= ~_BV(PB0);
 194:	c0 98       	cbi	0x18, 0	; 24

volatile uint8_t brightness[8] = {0,0,0,0,0,0,0,0};

int main(void) {
	setup();
	cli();
 196:	f8 94       	cli
	__DISPLAY_OFF;
 198:	c1 9a       	sbi	0x18, 1	; 24
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	40 ed       	ldi	r20, 0xD0	; 208
 1a0:	57 e0       	ldi	r21, 0x07	; 7
 1a2:	ca 01       	movw	r24, r20
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x8a>
 1a8:	2f 5f       	subi	r18, 0xFF	; 255
 1aa:	3f 4f       	sbci	r19, 0xFF	; 255
  PORTB &= ~_BV(PB0);
}

void __delay_ms(uint16_t ms) {
  uint16_t ctr1;
  for(ctr1 = 0; ctr1 < ms; ctr1++ ){
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	20 39       	cpi	r18, 0x90	; 144
 1b0:	38 07       	cpc	r19, r24
 1b2:	b9 f7       	brne	.-18     	; 0x1a2 <main+0x88>
int main(void) {
	setup();
	cli();
	__DISPLAY_OFF;
	__delay_ms(400);
	PORTB |= _BV(PB0); // debug led on
 1b4:	c0 9a       	sbi	0x18, 0	; 24
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 ed       	ldi	r20, 0xD0	; 208
 1bc:	57 e0       	ldi	r21, 0x07	; 7
 1be:	ca 01       	movw	r24, r20
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0xa6>
 1c4:	2f 5f       	subi	r18, 0xFF	; 255
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
  PORTB &= ~_BV(PB0);
}

void __delay_ms(uint16_t ms) {
  uint16_t ctr1;
  for(ctr1 = 0; ctr1 < ms; ctr1++ ){
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	20 39       	cpi	r18, 0x90	; 144
 1cc:	38 07       	cpc	r19, r24
 1ce:	b9 f7       	brne	.-18     	; 0x1be <main+0xa4>
	cli();
	__DISPLAY_OFF;
	__delay_ms(400);
	PORTB |= _BV(PB0); // debug led on
	__delay_ms(400);
	PORTB &= ~_BV(PB0); // off again
 1d0:	c0 98       	cbi	0x18, 0	; 24
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <main+0xb8>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
