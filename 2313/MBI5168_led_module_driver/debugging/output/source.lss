
output/source.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800060  00800060  0000023c  2**0
                  ALLOC
  2 .stab         000006b4  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000050  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000008a  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003f3  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a0  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e8  00000000  00000000  00000fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000187  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  000015a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000015f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

  while ( (USISR & _BV(USIOIF)) == 0 ) {
   USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
  }
  return USIDR;
}
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	86 c0       	rjmp	.+268    	; 0x116 <__vector_4>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e8 ec       	ldi	r30, 0xC8	; 200
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a0 36       	cpi	r26, 0x60	; 96
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a0 e6       	ldi	r26, 0x60	; 96
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a9 36       	cpi	r26, 0x69	; 105
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	42 d0       	rcall	.+132    	; 0xda <main>
  56:	b6 c0       	rjmp	.+364    	; 0x1c4 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <_Z16setup_timer1_ctcv>:

void setup_timer1_ctc(void)
{
	uint8_t _sreg = SREG;	/* save SREG */
  5a:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* disable all interrupts while messing with the register setup */
  5c:	f8 94       	cli

	/* multiplexed TRUE-RGB PWM mode (quite dim) */
	/* set prescaler to 1 */
	TCCR1B |= (_BV(CS10));
  5e:	8e b5       	in	r24, 0x2e	; 46
  60:	81 60       	ori	r24, 0x01	; 1
  62:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(_BV(CS11) | _BV(CS12));
  64:	8e b5       	in	r24, 0x2e	; 46
  66:	89 7f       	andi	r24, 0xF9	; 249
  68:	8e bd       	out	0x2e, r24	; 46
	/* set WGM mode 4: CTC using OCR1A */
	TCCR1A &= ~(_BV(WGM11) | _BV(WGM10));
  6a:	8f b5       	in	r24, 0x2f	; 47
  6c:	8c 7f       	andi	r24, 0xFC	; 252
  6e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= _BV(WGM12);
  70:	8e b5       	in	r24, 0x2e	; 46
  72:	88 60       	ori	r24, 0x08	; 8
  74:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~_BV(WGM13);
  76:	8e b5       	in	r24, 0x2e	; 46
  78:	8f 7e       	andi	r24, 0xEF	; 239
  7a:	8e bd       	out	0x2e, r24	; 46
	/* normal operation - disconnect PWM pins */
	TCCR1A &= ~(_BV(COM1A1) | _BV(COM1A0) | _BV(COM1B1) | _BV(COM1B0));
  7c:	8f b5       	in	r24, 0x2f	; 47
  7e:	8f 70       	andi	r24, 0x0F	; 15
  80:	8f bd       	out	0x2f, r24	; 47
	/* set top value for TCNT1 */
	OCR1A = __OCR1A;
  82:	80 ea       	ldi	r24, 0xA0	; 160
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	9b bd       	out	0x2b, r25	; 43
  88:	8a bd       	out	0x2a, r24	; 42
	/* enable COMPA isr */
	TIMSK |= _BV(OCIE1A);
  8a:	89 b7       	in	r24, 0x39	; 57
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	89 bf       	out	0x39, r24	; 57
	/* restore SREG with global interrupt flag */
	SREG = _sreg;
  90:	2f bf       	out	0x3f, r18	; 63
}
  92:	08 95       	ret

00000094 <_Z5setupv>:
	PORTB &= ~_BV(PB0); // off again
	for(;;) {} // stop here
};

void setup(void) {
  DDRB |= _BV(PB0); // set LED pin as output
  94:	b8 9a       	sbi	0x17, 0	; 23
  DDRB |= _BV(PB1); // display enable pin as output
  96:	b9 9a       	sbi	0x17, 1	; 23
  PORTB |= _BV(PB1); // pullup on
  98:	c1 9a       	sbi	0x18, 1	; 24
  
  // USI stuff
  
  DDRB |= _BV(PB6); // as output (DO)
  9a:	be 9a       	sbi	0x17, 6	; 23
  DDRB |= _BV(PB7); // as output (USISCK)
  9c:	bf 9a       	sbi	0x17, 7	; 23
  DDRB &= ~_BV(PB5); // as input (DI)
  9e:	bd 98       	cbi	0x17, 5	; 23
  PORTB |= _BV(PB5); // pullup on (DI)
  a0:	c5 9a       	sbi	0x18, 5	; 24

  sei(); // turn global irq flag on
  a2:	78 94       	sei

  setup_timer1_ctc();
  a4:	da df       	rcall	.-76     	; 0x5a <_Z16setup_timer1_ctcv>
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
}

void current_calib(void) {
  uint8_t ctr1;
  for(ctr1 = 0; ctr1 <= 7; ctr1++) {
    brightness[ctr1] = 255;
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	fc 01       	movw	r30, r24
  ae:	e0 5a       	subi	r30, 0xA0	; 160
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	20 83       	st	Z, r18
  b4:	01 96       	adiw	r24, 0x01	; 1
  current_calib();
}

void current_calib(void) {
  uint8_t ctr1;
  for(ctr1 = 0; ctr1 <= 7; ctr1++) {
  b6:	88 30       	cpi	r24, 0x08	; 8
  b8:	91 05       	cpc	r25, r1
  ba:	c1 f7       	brne	.-16     	; 0xac <_Z5setupv+0x18>
    brightness[ctr1] = 255;
  }
  PORTB |= _BV(PB0);
  bc:	c0 9a       	sbi	0x18, 0	; 24
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  c2:	20 ed       	ldi	r18, 0xD0	; 208
  c4:	37 e0       	ldi	r19, 0x07	; 7
  c6:	f9 01       	movw	r30, r18
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <_Z5setupv+0x34>
  PORTB &= ~_BV(PB0);
}

void __delay_ms(uint16_t ms) {
  uint16_t ctr1;
  for(ctr1 = 0; ctr1 < ms; ctr1++ ){
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	43 e0       	ldi	r20, 0x03	; 3
  d0:	88 3e       	cpi	r24, 0xE8	; 232
  d2:	94 07       	cpc	r25, r20
  d4:	c1 f7       	brne	.-16     	; 0xc6 <_Z5setupv+0x32>
  for(ctr1 = 0; ctr1 <= 7; ctr1++) {
    brightness[ctr1] = 255;
  }
  PORTB |= _BV(PB0);
  __delay_ms(1000);
  PORTB &= ~_BV(PB0);
  d6:	c0 98       	cbi	0x18, 0	; 24

  sei(); // turn global irq flag on

  setup_timer1_ctc();
  current_calib();
}
  d8:	08 95       	ret

000000da <main>:
int main(void);

volatile uint8_t brightness[8] = {0,0,0,0,0,0,0,0};

int main(void) {
	setup();
  da:	dc df       	rcall	.-72     	; 0x94 <_Z5setupv>
	cli();
  dc:	f8 94       	cli
	__DISPLAY_OFF;
  de:	c1 9a       	sbi	0x18, 1	; 24
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	20 ed       	ldi	r18, 0xD0	; 208
  e6:	37 e0       	ldi	r19, 0x07	; 7
  e8:	f9 01       	movw	r30, r18
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <__stack+0xb>
  PORTB &= ~_BV(PB0);
}

void __delay_ms(uint16_t ms) {
  uint16_t ctr1;
  for(ctr1 = 0; ctr1 < ms; ctr1++ ){
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	43 e0       	ldi	r20, 0x03	; 3
  f2:	88 3e       	cpi	r24, 0xE8	; 232
  f4:	94 07       	cpc	r25, r20
  f6:	c1 f7       	brne	.-16     	; 0xe8 <__stack+0x9>
int main(void) {
	setup();
	cli();
	__DISPLAY_OFF;
	__delay_ms(1000);
	PORTB |= _BV(PB0); // debug led on
  f8:	c0 9a       	sbi	0x18, 0	; 24
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	20 ed       	ldi	r18, 0xD0	; 208
 100:	37 e0       	ldi	r19, 0x07	; 7
 102:	f9 01       	movw	r30, r18
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <__stack+0x25>
  PORTB &= ~_BV(PB0);
}

void __delay_ms(uint16_t ms) {
  uint16_t ctr1;
  for(ctr1 = 0; ctr1 < ms; ctr1++ ){
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	43 e0       	ldi	r20, 0x03	; 3
 10c:	88 3e       	cpi	r24, 0xE8	; 232
 10e:	94 07       	cpc	r25, r20
 110:	c1 f7       	brne	.-16     	; 0x102 <__stack+0x23>
	cli();
	__DISPLAY_OFF;
	__delay_ms(1000);
	PORTB |= _BV(PB0); // debug led on
	__delay_ms(1000);
	PORTB &= ~_BV(PB0); // off again
 112:	c0 98       	cbi	0x18, 0	; 24
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stack+0x35>

00000116 <__vector_4>:
	TIMSK |= _BV(OCIE1A);
	/* restore SREG with global interrupt flag */
	SREG = _sreg;
}

ISR(TIMER1_COMPA_vect)
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
{				/* Framebuffer interrupt routine */

	__DISPLAY_ON;
 134:	c1 98       	cbi	0x18, 1	; 24

		uint8_t led;
		uint8_t red = 0x00;	// off

		for (led = 0; led <= 7; led++) {
			if ( pwm_cycle < brightness[led] ) {
 136:	50 91 68 00 	lds	r21, 0x0068
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
				red |= _BV(led);
			}
			else {
				red &= ~_BV(led);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	70 e0       	ldi	r23, 0x00	; 0

		uint8_t led;
		uint8_t red = 0x00;	// off

		for (led = 0; led <= 7; led++) {
			if ( pwm_cycle < brightness[led] ) {
 144:	f9 01       	movw	r30, r18
 146:	e0 5a       	subi	r30, 0xA0	; 160
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	80 81       	ld	r24, Z
 14c:	58 17       	cp	r21, r24
 14e:	48 f4       	brcc	.+18     	; 0x162 <__vector_4+0x4c>
				red |= _BV(led);
 150:	cb 01       	movw	r24, r22
 152:	02 2e       	mov	r0, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <__vector_4+0x44>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <__vector_4+0x40>
 15e:	48 2b       	or	r20, r24
 160:	09 c0       	rjmp	.+18     	; 0x174 <__vector_4+0x5e>
			}
			else {
				red &= ~_BV(led);
 162:	cb 01       	movw	r24, r22
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <__vector_4+0x56>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <__vector_4+0x52>
 170:	80 95       	com	r24
 172:	48 23       	and	r20, r24
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	3f 4f       	sbci	r19, 0xFF	; 255
	static uint8_t pwm_cycle = 0;

		uint8_t led;
		uint8_t red = 0x00;	// off

		for (led = 0; led <= 7; led++) {
 178:	28 30       	cpi	r18, 0x08	; 8
 17a:	31 05       	cpc	r19, r1
 17c:	19 f7       	brne	.-58     	; 0x144 <__vector_4+0x2e>
			else {
				red &= ~_BV(led);
			}
		}

		__LATCH_LOW;
 17e:	c4 98       	cbi	0x18, 4	; 24
/*
Functions dealing with hardware specific jobs / settings
*/

uint8_t spi_transfer(uint8_t data) {
  USIDR = data;
 180:	4f b9       	out	0x0f, r20	; 15
  USISR = _BV(USIOIF); // clear flag
 182:	80 e4       	ldi	r24, 0x40	; 64
 184:	8e b9       	out	0x0e, r24	; 14

  while ( (USISR & _BV(USIOIF)) == 0 ) {
   USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
 186:	8b e1       	ldi	r24, 0x1B	; 27
 188:	01 c0       	rjmp	.+2      	; 0x18c <__vector_4+0x76>
 18a:	8d b9       	out	0x0d, r24	; 13

uint8_t spi_transfer(uint8_t data) {
  USIDR = data;
  USISR = _BV(USIOIF); // clear flag

  while ( (USISR & _BV(USIOIF)) == 0 ) {
 18c:	76 9b       	sbis	0x0e, 6	; 14
 18e:	fd cf       	rjmp	.-6      	; 0x18a <__vector_4+0x74>
   USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
  }
  return USIDR;
 190:	8f b1       	in	r24, 0x0f	; 15
			}
		}

		__LATCH_LOW;
		spi_transfer(red);
		__LATCH_HIGH;
 192:	c4 9a       	sbi	0x18, 4	; 24

        pwm_cycle++;
 194:	85 2f       	mov	r24, r21
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	80 93 68 00 	sts	0x0068, r24

        if(pwm_cycle > __pwm_loop_max) {
 19c:	80 31       	cpi	r24, 0x10	; 16
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <__vector_4+0x8e>
	  pwm_cycle = 0;
 1a0:	10 92 68 00 	sts	0x0068, r1
	}	  

	__DISPLAY_OFF;	
 1a4:	c1 9a       	sbi	0x18, 1	; 24
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
