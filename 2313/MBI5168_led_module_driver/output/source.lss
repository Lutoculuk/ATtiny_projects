
output/source.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000005ae  00000642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800082  00800082  00000664  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000038  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000009b  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006b2  00000000  00000000  00000e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001da  00000000  00000000  000014f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000546  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000050  00000000  00000000  00001c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ee  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000035b  00000000  00000000  00001e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  000021ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_4>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	c4 c1       	rjmp	.+904    	; 0x396 <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ee ea       	ldi	r30, 0xAE	; 174
  36:	f5 e0       	ldi	r31, 0x05	; 5
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a2 38       	cpi	r26, 0x82	; 130
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a2 e8       	ldi	r26, 0x82	; 130
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	aa 3a       	cpi	r26, 0xAA	; 170
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	28 d0       	rcall	.+80     	; 0xa6 <main>
  56:	a9 c2       	rjmp	.+1362   	; 0x5aa <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <_ZL10bubbleSortPP5led_th>:
		sorted[0][index] = &glob_brightness[0][index];
		sorted[1][index] = &glob_brightness[1][index];
	}
}

static void bubbleSort(led_t ** array, uint8_t length)
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
  5e:	58 2f       	mov	r21, r24
  60:	49 2f       	mov	r20, r25
  62:	15 c0       	rjmp	.+42     	; 0x8e <_ZL10bubbleSortPP5led_th+0x34>
	for(i = (length - 1); i > 0; i--)
	{
		test = 0;
		for(j = 0; j < i; j++)
		{
			if( (*array[j]).dutycycle > (*array[j+1]).dutycycle )
  64:	c0 81       	ld	r28, Z
  66:	d1 81       	ldd	r29, Z+1	; 0x01
  68:	a2 81       	ldd	r26, Z+2	; 0x02
  6a:	b3 81       	ldd	r27, Z+3	; 0x03
  6c:	99 81       	ldd	r25, Y+1	; 0x01
  6e:	11 96       	adiw	r26, 0x01	; 1
  70:	8c 91       	ld	r24, X
  72:	11 97       	sbiw	r26, 0x01	; 1
  74:	89 17       	cp	r24, r25
  76:	28 f4       	brcc	.+10     	; 0x82 <_ZL10bubbleSortPP5led_th+0x28>
			{
				temp = array[j];
				array[j] = array[j+1];
  78:	b1 83       	std	Z+1, r27	; 0x01
  7a:	a0 83       	st	Z, r26
				array[j+1] = temp;
  7c:	d3 83       	std	Z+3, r29	; 0x03
  7e:	c2 83       	std	Z+2, r28	; 0x02
  80:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t test;

	for(i = (length - 1); i > 0; i--)
	{
		test = 0;
		for(j = 0; j < i; j++)
  82:	2f 5f       	subi	r18, 0xFF	; 255
  84:	32 96       	adiw	r30, 0x02	; 2
  86:	26 17       	cp	r18, r22
  88:	68 f3       	brcs	.-38     	; 0x64 <_ZL10bubbleSortPP5led_th+0xa>
				array[j] = array[j+1];
				array[j+1] = temp;
				test = 1;
			}
		}
		if(test == 0)
  8a:	33 23       	and	r19, r19
  8c:	49 f0       	breq	.+18     	; 0xa0 <_ZL10bubbleSortPP5led_th+0x46>
	uint8_t i;
	uint8_t j;
	led_t * temp;
	uint8_t test;

	for(i = (length - 1); i > 0; i--)
  8e:	61 50       	subi	r22, 0x01	; 1
  90:	39 f0       	breq	.+14     	; 0xa0 <_ZL10bubbleSortPP5led_th+0x46>
  92:	85 2f       	mov	r24, r21
  94:	94 2f       	mov	r25, r20
  96:	9c 01       	movw	r18, r24
  98:	f9 01       	movw	r30, r18
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	f3 cf       	rjmp	.-26     	; 0x86 <_ZL10bubbleSortPP5led_th+0x2c>
		if(test == 0)
		{
			break;
		}
	}
}
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	08 95       	ret

000000a6 <main>:
volatile uint8_t write_to_this = 1;
volatile uint8_t flip_req = 0;

volatile uint32_t system_ticks = 0;

int main(void)
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	e2 e8       	ldi	r30, 0x82	; 130
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
static inline void populate_sorted(void)
{
	uint8_t index;
	for(index = 0; index < 8; index++)
	{
		sorted[0][index] = &glob_brightness[0][index];
  ba:	c9 01       	movw	r24, r18
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	80 5a       	subi	r24, 0xA0	; 160
  c2:	9f 4f       	sbci	r25, 0xFF	; 255
  c4:	91 83       	std	Z+1, r25	; 0x01
  c6:	80 83       	st	Z, r24
		sorted[1][index] = &glob_brightness[1][index];
  c8:	c9 01       	movw	r24, r18
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	80 59       	subi	r24, 0x90	; 144
  d0:	9f 4f       	sbci	r25, 0xFF	; 255
  d2:	91 8b       	std	Z+17, r25	; 0x11
  d4:	80 8b       	std	Z+16, r24	; 0x10
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	32 96       	adiw	r30, 0x02	; 2
}

static inline void populate_sorted(void)
{
	uint8_t index;
	for(index = 0; index < 8; index++)
  dc:	28 30       	cpi	r18, 0x08	; 8
  de:	31 05       	cpc	r19, r1
  e0:	61 f7       	brne	.-40     	; 0xba <main+0x14>
volatile uint32_t system_ticks = 0;

int main(void)
{
	populate_sorted();
	bubbleSort(&sorted[read_from_this][0],8);
  e2:	80 91 a2 00 	lds	r24, 0x00A2
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	44 e0       	ldi	r20, 0x04	; 4
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	4a 95       	dec	r20
  f0:	e1 f7       	brne	.-8      	; 0xea <__stack+0xb>
  f2:	8e 57       	subi	r24, 0x7E	; 126
  f4:	9f 4f       	sbci	r25, 0xFF	; 255
  f6:	68 e0       	ldi	r22, 0x08	; 8
  f8:	b0 df       	rcall	.-160    	; 0x5a <_ZL10bubbleSortPP5led_th>
	bubbleSort(&sorted[write_to_this][0],8);
  fa:	80 91 80 00 	lds	r24, 0x0080
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	34 e0       	ldi	r19, 0x04	; 4
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	3a 95       	dec	r19
 108:	e1 f7       	brne	.-8      	; 0x102 <__stack+0x23>
 10a:	8e 57       	subi	r24, 0x7E	; 126
 10c:	9f 4f       	sbci	r25, 0xFF	; 255
 10e:	68 e0       	ldi	r22, 0x08	; 8
 110:	a4 df       	rcall	.-184    	; 0x5a <_ZL10bubbleSortPP5led_th>
	delay(10000);
}

static inline void setup_hw(void)
{
	DDRB |= _BV(PB0);	// set LED pin as output
 112:	b8 9a       	sbi	0x17, 0	; 23
	__LED0_ON;
 114:	c0 9a       	sbi	0x18, 0	; 24

	DDRB |= _BV(PB1);	// 2nd LED pin
 116:	b9 9a       	sbi	0x17, 1	; 23
	__LED1_ON;
 118:	c1 9a       	sbi	0x18, 1	; 24

	DDRB |= _BV(PB2);	// display enable pin as output
 11a:	ba 9a       	sbi	0x17, 2	; 23
	PORTB |= _BV(PB2);	// pullup on
 11c:	c2 9a       	sbi	0x18, 2	; 24

	// USI stuff

	DDRB |= _BV(PB6);	// as output (DO)
 11e:	be 9a       	sbi	0x17, 6	; 23
	DDRB |= _BV(PB7);	// as output (USISCK)
 120:	bf 9a       	sbi	0x17, 7	; 23
	DDRB &= ~_BV(PB5);	// as input (DI)
 122:	bd 98       	cbi	0x17, 5	; 23
	PORTB |= _BV(PB5);	// pullup on (DI)
 124:	c5 9a       	sbi	0x18, 5	; 24

	sei();			// turn global irq flag on
 126:	78 94       	sei
}

static inline void setup_system_ticker(void)
{
	/* save SREG and turn interrupts off globally */
	uint8_t _sreg = SREG;
 128:	9f b7       	in	r25, 0x3f	; 63
	cli();
 12a:	f8 94       	cli
	/* using timer0 */
	/* setting prescaler to 1 */
	TCCR0B |= _BV(CS00);
 12c:	83 b7       	in	r24, 0x33	; 51
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	83 bf       	out	0x33, r24	; 51
	TCCR0B &= ~(_BV(CS01) | _BV(CS02));
 132:	83 b7       	in	r24, 0x33	; 51
 134:	89 7f       	andi	r24, 0xF9	; 249
 136:	83 bf       	out	0x33, r24	; 51
	/* set WGM mode 0 */
	TCCR0A &= ~(_BV(WGM01) | _BV(WGM00));
 138:	80 b7       	in	r24, 0x30	; 48
 13a:	8c 7f       	andi	r24, 0xFC	; 252
 13c:	80 bf       	out	0x30, r24	; 48
	TCCR0B &= ~_BV(WGM02);
 13e:	83 b7       	in	r24, 0x33	; 51
 140:	87 7f       	andi	r24, 0xF7	; 247
 142:	83 bf       	out	0x33, r24	; 51
	/* normal operation - disconnect PWM pins */
	TCCR0A &= ~(_BV(COM0A1) | _BV(COM0A0) | _BV(COM0B1) | _BV(COM0B0));
 144:	80 b7       	in	r24, 0x30	; 48
 146:	8f 70       	andi	r24, 0x0F	; 15
 148:	80 bf       	out	0x30, r24	; 48
	/* enabling overflow interrupt */
	TIMSK |= _BV(TOIE0);
 14a:	89 b7       	in	r24, 0x39	; 57
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	89 bf       	out	0x39, r24	; 57
	/* restore SREG */
	SREG = _sreg;
 150:	9f bf       	out	0x3f, r25	; 63
}

static inline void setup_timer1_ctc(void)
{
	uint8_t _sreg = SREG;	/* save SREG */
 152:	2f b7       	in	r18, 0x3f	; 63
	cli();			/* disable all interrupts while messing with the register setup */
 154:	f8 94       	cli

	/* multiplexed TRUE-RGB PWM mode (quite dim) */
	/* set prescaler to 1024 */
	TCCR1B |= (_BV(CS10) | _BV(CS12));
 156:	8e b5       	in	r24, 0x2e	; 46
 158:	85 60       	ori	r24, 0x05	; 5
 15a:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(_BV(CS11));
 15c:	8e b5       	in	r24, 0x2e	; 46
 15e:	8d 7f       	andi	r24, 0xFD	; 253
 160:	8e bd       	out	0x2e, r24	; 46
	/* set WGM mode 4: CTC using OCR1A */
	TCCR1A &= ~(_BV(WGM11) | _BV(WGM10));
 162:	8f b5       	in	r24, 0x2f	; 47
 164:	8c 7f       	andi	r24, 0xFC	; 252
 166:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= _BV(WGM12);
 168:	8e b5       	in	r24, 0x2e	; 46
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~_BV(WGM13);
 16e:	8e b5       	in	r24, 0x2e	; 46
 170:	8f 7e       	andi	r24, 0xEF	; 239
 172:	8e bd       	out	0x2e, r24	; 46
	/* normal operation - disconnect PWM pins */
	TCCR1A &= ~(_BV(COM1A1) | _BV(COM1A0) | _BV(COM1B1) | _BV(COM1B0));
 174:	8f b5       	in	r24, 0x2f	; 47
 176:	8f 70       	andi	r24, 0x0F	; 15
 178:	8f bd       	out	0x2f, r24	; 47
	/* set top value for TCNT1 */
	OCR1A = __OCR1A_max;
 17a:	80 e8       	ldi	r24, 0x80	; 128
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	9b bd       	out	0x2b, r25	; 43
 180:	8a bd       	out	0x2a, r24	; 42
	/* enable COMPA isr */
	TIMSK |= _BV(OCIE1A);
 182:	89 b7       	in	r24, 0x39	; 57
 184:	80 64       	ori	r24, 0x40	; 64
 186:	89 bf       	out	0x39, r24	; 57
	/* restore SREG with global interrupt flag */
	SREG = _sreg;
 188:	2f bf       	out	0x3f, r18	; 63
	sei();			// turn global irq flag on

	setup_system_ticker();
	setup_timer1_ctc();
	//current_calib();
	__DISPLAY_ON;
 18a:	c2 98       	cbi	0x18, 2	; 24
 18c:	10 e0       	ldi	r17, 0x00	; 0

static void fader(void)
{
	uint8_t ctr1;
	uint8_t ctr2;
	for (ctr1 = 0; ctr1 <= 128; ctr1++) {
 18e:	20 e8       	ldi	r18, 0x80	; 128
 190:	e2 2e       	mov	r14, r18
	}
	for (ctr1 = 128; (ctr1 >= 0) && (ctr1 != 255); ctr1--) {
		for (ctr2 = 0; ctr2 <= 7; ctr2++) {
			glob_brightness[write_to_this][ctr2].dutycycle = ctr1;
			bubbleSort(&sorted[write_to_this][0],8);
			flip_req = 1;
 192:	01 e0       	ldi	r16, 0x01	; 1
 194:	ff 24       	eor	r15, r15
 196:	f3 94       	inc	r15
 198:	42 c0       	rjmp	.+132    	; 0x21e <__stack+0x13f>
	sei();			// turn global irq flag on

	setup_system_ticker();
	setup_timer1_ctc();
	//current_calib();
	__DISPLAY_ON;
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
{
	uint8_t ctr1;
	uint8_t ctr2;
	for (ctr1 = 0; ctr1 <= 128; ctr1++) {
		for (ctr2 = 0; ctr2 <= 7; ctr2++) {
			glob_brightness[write_to_this][ctr2].dutycycle = ctr1;
 19e:	e0 91 80 00 	lds	r30, 0x0080
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	9a 95       	dec	r25
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <__stack+0xc7>
 1ae:	ec 0f       	add	r30, r28
 1b0:	fd 1f       	adc	r31, r29
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	e0 5a       	subi	r30, 0xA0	; 160
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	11 83       	std	Z+1, r17	; 0x01
			bubbleSort(&sorted[write_to_this][0],8);
 1bc:	80 91 80 00 	lds	r24, 0x0080
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	b4 e0       	ldi	r27, 0x04	; 4
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	ba 95       	dec	r27
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <__stack+0xe5>
 1cc:	8e 57       	subi	r24, 0x7E	; 126
 1ce:	9f 4f       	sbci	r25, 0xFF	; 255
 1d0:	68 e0       	ldi	r22, 0x08	; 8
 1d2:	43 df       	rcall	.-378    	; 0x5a <_ZL10bubbleSortPP5led_th>
			flip_req = 1;
 1d4:	00 93 a3 00 	sts	0x00A3, r16
 1d8:	21 96       	adiw	r28, 0x01	; 1
static void fader(void)
{
	uint8_t ctr1;
	uint8_t ctr2;
	for (ctr1 = 0; ctr1 <= 128; ctr1++) {
		for (ctr2 = 0; ctr2 <= 7; ctr2++) {
 1da:	c8 30       	cpi	r28, 0x08	; 8
 1dc:	d1 05       	cpc	r29, r1
 1de:	f9 f6       	brne	.-66     	; 0x19e <__stack+0xbf>
	delay(50000);
}

static inline uint32_t time(void)
{
	uint8_t _sreg = SREG;
 1e0:	8f b7       	in	r24, 0x3f	; 63
	uint32_t time;
	cli();
 1e2:	f8 94       	cli
	time = system_ticks;
 1e4:	40 91 a4 00 	lds	r20, 0x00A4
 1e8:	50 91 a5 00 	lds	r21, 0x00A5
 1ec:	60 91 a6 00 	lds	r22, 0x00A6
 1f0:	70 91 a7 00 	lds	r23, 0x00A7
	SREG = _sreg;
 1f4:	8f bf       	out	0x3f, r24	; 63
	delay(50000);
}

static inline uint32_t time(void)
{
	uint8_t _sreg = SREG;
 1f6:	2f b7       	in	r18, 0x3f	; 63
	uint32_t time;
	cli();
 1f8:	f8 94       	cli
	time = system_ticks;
 1fa:	80 91 a4 00 	lds	r24, 0x00A4
 1fe:	90 91 a5 00 	lds	r25, 0x00A5
 202:	a0 91 a6 00 	lds	r26, 0x00A6
 206:	b0 91 a7 00 	lds	r27, 0x00A7
	SREG = _sreg;
 20a:	2f bf       	out	0x3f, r18	; 63
}

static inline void delay(uint32_t ticks)
{
	uint32_t start_time = time();
	while ((time() - start_time) < ticks) {
 20c:	84 1b       	sub	r24, r20
 20e:	95 0b       	sbc	r25, r21
 210:	a6 0b       	sbc	r26, r22
 212:	b7 0b       	sbc	r27, r23
 214:	80 97       	sbiw	r24, 0x20	; 32
 216:	a1 05       	cpc	r26, r1
 218:	b1 05       	cpc	r27, r1
 21a:	68 f3       	brcs	.-38     	; 0x1f6 <__stack+0x117>

static void fader(void)
{
	uint8_t ctr1;
	uint8_t ctr2;
	for (ctr1 = 0; ctr1 <= 128; ctr1++) {
 21c:	1f 5f       	subi	r17, 0xFF	; 255
 21e:	11 38       	cpi	r17, 0x81	; 129
 220:	08 f4       	brcc	.+2      	; 0x224 <__stack+0x145>
 222:	bb cf       	rjmp	.-138    	; 0x19a <__stack+0xbb>
 224:	10 e8       	ldi	r17, 0x80	; 128
 226:	42 c0       	rjmp	.+132    	; 0x2ac <__stack+0x1cd>
		}
		delay(__fade_delay);
	}
	for (ctr1 = 128; (ctr1 >= 0) && (ctr1 != 255); ctr1--) {
		for (ctr2 = 0; ctr2 <= 7; ctr2++) {
			glob_brightness[write_to_this][ctr2].dutycycle = ctr1;
 228:	e0 91 80 00 	lds	r30, 0x0080
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	a3 e0       	ldi	r26, 0x03	; 3
 230:	ee 0f       	add	r30, r30
 232:	ff 1f       	adc	r31, r31
 234:	aa 95       	dec	r26
 236:	e1 f7       	brne	.-8      	; 0x230 <__stack+0x151>
 238:	ec 0f       	add	r30, r28
 23a:	fd 1f       	adc	r31, r29
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	e0 5a       	subi	r30, 0xA0	; 160
 242:	ff 4f       	sbci	r31, 0xFF	; 255
 244:	11 83       	std	Z+1, r17	; 0x01
			bubbleSort(&sorted[write_to_this][0],8);
 246:	80 91 80 00 	lds	r24, 0x0080
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	64 e0       	ldi	r22, 0x04	; 4
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e1 f7       	brne	.-8      	; 0x24e <__stack+0x16f>
 256:	8e 57       	subi	r24, 0x7E	; 126
 258:	9f 4f       	sbci	r25, 0xFF	; 255
 25a:	68 e0       	ldi	r22, 0x08	; 8
 25c:	fe de       	rcall	.-516    	; 0x5a <_ZL10bubbleSortPP5led_th>
			flip_req = 1;
 25e:	f0 92 a3 00 	sts	0x00A3, r15
 262:	21 96       	adiw	r28, 0x01	; 1
			flip_req = 1;
		}
		delay(__fade_delay);
	}
	for (ctr1 = 128; (ctr1 >= 0) && (ctr1 != 255); ctr1--) {
		for (ctr2 = 0; ctr2 <= 7; ctr2++) {
 264:	c8 30       	cpi	r28, 0x08	; 8
 266:	d1 05       	cpc	r29, r1
 268:	f9 f6       	brne	.-66     	; 0x228 <__stack+0x149>
	delay(50000);
}

static inline uint32_t time(void)
{
	uint8_t _sreg = SREG;
 26a:	8f b7       	in	r24, 0x3f	; 63
	uint32_t time;
	cli();
 26c:	f8 94       	cli
	time = system_ticks;
 26e:	40 91 a4 00 	lds	r20, 0x00A4
 272:	50 91 a5 00 	lds	r21, 0x00A5
 276:	60 91 a6 00 	lds	r22, 0x00A6
 27a:	70 91 a7 00 	lds	r23, 0x00A7
	SREG = _sreg;
 27e:	8f bf       	out	0x3f, r24	; 63
	delay(50000);
}

static inline uint32_t time(void)
{
	uint8_t _sreg = SREG;
 280:	2f b7       	in	r18, 0x3f	; 63
	uint32_t time;
	cli();
 282:	f8 94       	cli
	time = system_ticks;
 284:	80 91 a4 00 	lds	r24, 0x00A4
 288:	90 91 a5 00 	lds	r25, 0x00A5
 28c:	a0 91 a6 00 	lds	r26, 0x00A6
 290:	b0 91 a7 00 	lds	r27, 0x00A7
	SREG = _sreg;
 294:	2f bf       	out	0x3f, r18	; 63
}

static inline void delay(uint32_t ticks)
{
	uint32_t start_time = time();
	while ((time() - start_time) < ticks) {
 296:	84 1b       	sub	r24, r20
 298:	95 0b       	sbc	r25, r21
 29a:	a6 0b       	sbc	r26, r22
 29c:	b7 0b       	sbc	r27, r23
 29e:	80 97       	sbiw	r24, 0x20	; 32
 2a0:	a1 05       	cpc	r26, r1
 2a2:	b1 05       	cpc	r27, r1
 2a4:	68 f3       	brcs	.-38     	; 0x280 <__stack+0x1a1>
			bubbleSort(&sorted[write_to_this][0],8);
			flip_req = 1;
		}
		delay(__fade_delay);
	}
	for (ctr1 = 128; (ctr1 >= 0) && (ctr1 != 255); ctr1--) {
 2a6:	11 50       	subi	r17, 0x01	; 1
 2a8:	1f 3f       	cpi	r17, 0xFF	; 255
 2aa:	19 f0       	breq	.+6      	; 0x2b2 <__stack+0x1d3>
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
 2b0:	bb cf       	rjmp	.-138    	; 0x228 <__stack+0x149>

static inline void loop(void)
{
	fader();
	
	glob_brightness[write_to_this][4].dutycycle = 128;
 2b2:	e0 91 80 00 	lds	r30, 0x0080
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	54 e0       	ldi	r21, 0x04	; 4
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	5a 95       	dec	r21
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <__stack+0x1db>
 2c2:	e0 5a       	subi	r30, 0xA0	; 160
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	e1 86       	std	Z+9, r14	; 0x09
	bubbleSort(&sorted[write_to_this][0],8);
 2c8:	80 91 80 00 	lds	r24, 0x0080
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	44 e0       	ldi	r20, 0x04	; 4
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	4a 95       	dec	r20
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <__stack+0x1f1>
 2d8:	8e 57       	subi	r24, 0x7E	; 126
 2da:	9f 4f       	sbci	r25, 0xFF	; 255
 2dc:	68 e0       	ldi	r22, 0x08	; 8
 2de:	bd de       	rcall	.-646    	; 0x5a <_ZL10bubbleSortPP5led_th>
	flip_req = 1;
 2e0:	00 93 a3 00 	sts	0x00A3, r16
	delay(50000);
}

static inline uint32_t time(void)
{
	uint8_t _sreg = SREG;
 2e4:	8f b7       	in	r24, 0x3f	; 63
	uint32_t time;
	cli();
 2e6:	f8 94       	cli
	time = system_ticks;
 2e8:	40 91 a4 00 	lds	r20, 0x00A4
 2ec:	50 91 a5 00 	lds	r21, 0x00A5
 2f0:	60 91 a6 00 	lds	r22, 0x00A6
 2f4:	70 91 a7 00 	lds	r23, 0x00A7
	SREG = _sreg;
 2f8:	8f bf       	out	0x3f, r24	; 63
	delay(50000);
}

static inline uint32_t time(void)
{
	uint8_t _sreg = SREG;
 2fa:	2f b7       	in	r18, 0x3f	; 63
	uint32_t time;
	cli();
 2fc:	f8 94       	cli
	time = system_ticks;
 2fe:	80 91 a4 00 	lds	r24, 0x00A4
 302:	90 91 a5 00 	lds	r25, 0x00A5
 306:	a0 91 a6 00 	lds	r26, 0x00A6
 30a:	b0 91 a7 00 	lds	r27, 0x00A7
	SREG = _sreg;
 30e:	2f bf       	out	0x3f, r18	; 63
}

static inline void delay(uint32_t ticks)
{
	uint32_t start_time = time();
	while ((time() - start_time) < ticks) {
 310:	84 1b       	sub	r24, r20
 312:	95 0b       	sbc	r25, r21
 314:	a6 0b       	sbc	r26, r22
 316:	b7 0b       	sbc	r27, r23
 318:	80 51       	subi	r24, 0x10	; 16
 31a:	97 42       	sbci	r25, 0x27	; 39
 31c:	a0 40       	sbci	r26, 0x00	; 0
 31e:	b0 40       	sbci	r27, 0x00	; 0
 320:	60 f3       	brcs	.-40     	; 0x2fa <__stack+0x21b>
	glob_brightness[write_to_this][4].dutycycle = 128;
	bubbleSort(&sorted[write_to_this][0],8);
	flip_req = 1;
	delay(10000);

	glob_brightness[write_to_this][4].dutycycle = 0;
 322:	e0 91 80 00 	lds	r30, 0x0080
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	34 e0       	ldi	r19, 0x04	; 4
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	3a 95       	dec	r19
 330:	e1 f7       	brne	.-8      	; 0x32a <__stack+0x24b>
 332:	e0 5a       	subi	r30, 0xA0	; 160
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	11 86       	std	Z+9, r1	; 0x09
	bubbleSort(&sorted[write_to_this][0],8);
 338:	80 91 80 00 	lds	r24, 0x0080
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	24 e0       	ldi	r18, 0x04	; 4
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	2a 95       	dec	r18
 346:	e1 f7       	brne	.-8      	; 0x340 <__stack+0x261>
 348:	8e 57       	subi	r24, 0x7E	; 126
 34a:	9f 4f       	sbci	r25, 0xFF	; 255
 34c:	68 e0       	ldi	r22, 0x08	; 8
 34e:	85 de       	rcall	.-758    	; 0x5a <_ZL10bubbleSortPP5led_th>
	flip_req = 1;
 350:	00 93 a3 00 	sts	0x00A3, r16
	delay(50000);
}

static inline uint32_t time(void)
{
	uint8_t _sreg = SREG;
 354:	8f b7       	in	r24, 0x3f	; 63
	uint32_t time;
	cli();
 356:	f8 94       	cli
	time = system_ticks;
 358:	40 91 a4 00 	lds	r20, 0x00A4
 35c:	50 91 a5 00 	lds	r21, 0x00A5
 360:	60 91 a6 00 	lds	r22, 0x00A6
 364:	70 91 a7 00 	lds	r23, 0x00A7
	SREG = _sreg;
 368:	8f bf       	out	0x3f, r24	; 63
	delay(50000);
}

static inline uint32_t time(void)
{
	uint8_t _sreg = SREG;
 36a:	2f b7       	in	r18, 0x3f	; 63
	uint32_t time;
	cli();
 36c:	f8 94       	cli
	time = system_ticks;
 36e:	80 91 a4 00 	lds	r24, 0x00A4
 372:	90 91 a5 00 	lds	r25, 0x00A5
 376:	a0 91 a6 00 	lds	r26, 0x00A6
 37a:	b0 91 a7 00 	lds	r27, 0x00A7
	SREG = _sreg;
 37e:	2f bf       	out	0x3f, r18	; 63
}

static inline void delay(uint32_t ticks)
{
	uint32_t start_time = time();
	while ((time() - start_time) < ticks) {
 380:	84 1b       	sub	r24, r20
 382:	95 0b       	sbc	r25, r21
 384:	a6 0b       	sbc	r26, r22
 386:	b7 0b       	sbc	r27, r23
 388:	80 51       	subi	r24, 0x10	; 16
 38a:	97 42       	sbci	r25, 0x27	; 39
 38c:	a0 40       	sbci	r26, 0x00	; 0
 38e:	b0 40       	sbci	r27, 0x00	; 0
 390:	60 f3       	brcs	.-40     	; 0x36a <__stack+0x28b>
 392:	10 e0       	ldi	r17, 0x00	; 0
 394:	02 cf       	rjmp	.-508    	; 0x19a <__stack+0xbb>

00000396 <__vector_6>:
	TIMSK |= _BV(OCIE1A);
	/* restore SREG with global interrupt flag */
	SREG = _sreg;
}

ISR(TIMER0_OVF_vect)
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
 3a4:	af 93       	push	r26
 3a6:	bf 93       	push	r27
{
	__LED1_ON;
 3a8:	c1 9a       	sbi	0x18, 1	; 24
	system_ticks++;
 3aa:	80 91 a4 00 	lds	r24, 0x00A4
 3ae:	90 91 a5 00 	lds	r25, 0x00A5
 3b2:	a0 91 a6 00 	lds	r26, 0x00A6
 3b6:	b0 91 a7 00 	lds	r27, 0x00A7
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	a1 1d       	adc	r26, r1
 3be:	b1 1d       	adc	r27, r1
 3c0:	80 93 a4 00 	sts	0x00A4, r24
 3c4:	90 93 a5 00 	sts	0x00A5, r25
 3c8:	a0 93 a6 00 	sts	0x00A6, r26
 3cc:	b0 93 a7 00 	sts	0x00A7, r27
	__LED1_OFF;
 3d0:	c1 98       	cbi	0x18, 1	; 24
}
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__vector_4>:

ISR(TIMER1_COMPA_vect)
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	2f 93       	push	r18
 3f0:	3f 93       	push	r19
 3f2:	4f 93       	push	r20
 3f4:	5f 93       	push	r21
 3f6:	6f 93       	push	r22
 3f8:	7f 93       	push	r23
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
 3fe:	af 93       	push	r26
 400:	bf 93       	push	r27
 402:	ef 93       	push	r30
 404:	ff 93       	push	r31
{				/* Framebuffer interrupt routine */
	__LED0_ON;
 406:	c0 9a       	sbi	0x18, 0	; 24
	__DISPLAY_OFF;
 408:	c2 9a       	sbi	0x18, 2	; 24
	static uint8_t data = 0;	// init as off
	static uint8_t index = 0;

	/* starts with index = 0 */
	/* now calculate when to run the next time and turn on LED0 */
	if (index == 0) {
 40a:	30 91 a8 00 	lds	r19, 0x00A8
 40e:	33 23       	and	r19, r19
 410:	09 f5       	brne	.+66     	; 0x454 <__vector_4+0x70>
		if (flip_req == 1)
 412:	80 91 a3 00 	lds	r24, 0x00A3
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	51 f4       	brne	.+20     	; 0x42e <__vector_4+0x4a>
}

static inline void flip_buffers()
{
	uint8_t temp;
	temp = read_from_this;
 41a:	90 91 a2 00 	lds	r25, 0x00A2
	read_from_this = write_to_this;
 41e:	80 91 80 00 	lds	r24, 0x0080
 422:	80 93 a2 00 	sts	0x00A2, r24
	write_to_this = temp;
 426:	90 93 80 00 	sts	0x0080, r25
	/* now calculate when to run the next time and turn on LED0 */
	if (index == 0) {
		if (flip_req == 1)
		{
			flip_buffers(); // only do this at the beginning of a NEW cycle !
			flip_req = 0;
 42a:	10 92 a3 00 	sts	0x00A3, r1
		}
		OCR1A =
		    (uint16_t) ( (*sorted[read_from_this][index]).dutycycle );
 42e:	e0 91 a2 00 	lds	r30, 0x00A2
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	54 e0       	ldi	r21, 0x04	; 4
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	5a 95       	dec	r21
 43c:	e1 f7       	brne	.-8      	; 0x436 <__vector_4+0x52>
 43e:	ee 57       	subi	r30, 0x7E	; 126
 440:	ff 4f       	sbci	r31, 0xFF	; 255
 442:	01 90       	ld	r0, Z+
 444:	f0 81       	ld	r31, Z
 446:	e0 2d       	mov	r30, r0
 448:	81 81       	ldd	r24, Z+1	; 0x01
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	9b bd       	out	0x2b, r25	; 43
 44e:	8a bd       	out	0x2a, r24	; 42
		index++;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	31 c0       	rjmp	.+98     	; 0x4b6 <__vector_4+0xd2>
	} else if (index == 8) {	// the last led in the row
 454:	38 30       	cpi	r19, 0x08	; 8
 456:	91 f5       	brne	.+100    	; 0x4bc <__vector_4+0xd8>
		data |= _BV( (*sorted[read_from_this][(index - 1)]).number );
 458:	e0 91 a2 00 	lds	r30, 0x00A2
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	44 e0       	ldi	r20, 0x04	; 4
 460:	ee 0f       	add	r30, r30
 462:	ff 1f       	adc	r31, r31
 464:	4a 95       	dec	r20
 466:	e1 f7       	brne	.-8      	; 0x460 <__vector_4+0x7c>
 468:	ee 57       	subi	r30, 0x7E	; 126
 46a:	ff 4f       	sbci	r31, 0xFF	; 255
 46c:	06 84       	ldd	r0, Z+14	; 0x0e
 46e:	f7 85       	ldd	r31, Z+15	; 0x0f
 470:	e0 2d       	mov	r30, r0
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	00 80       	ld	r0, Z
 478:	02 c0       	rjmp	.+4      	; 0x47e <__vector_4+0x9a>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <__vector_4+0x96>
 482:	20 91 a9 00 	lds	r18, 0x00A9
 486:	28 2b       	or	r18, r24
 488:	20 93 a9 00 	sts	0x00A9, r18
		/* calculate when to turn everything off */
		OCR1A =
		    (uint16_t) ( 128 - (*sorted[read_from_this][(index - 1)]).dutycycle );
 48c:	e0 91 a2 00 	lds	r30, 0x00A2
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	34 e0       	ldi	r19, 0x04	; 4
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	3a 95       	dec	r19
 49a:	e1 f7       	brne	.-8      	; 0x494 <__vector_4+0xb0>
 49c:	ee 57       	subi	r30, 0x7E	; 126
 49e:	ff 4f       	sbci	r31, 0xFF	; 255
 4a0:	06 84       	ldd	r0, Z+14	; 0x0e
 4a2:	f7 85       	ldd	r31, Z+15	; 0x0f
 4a4:	e0 2d       	mov	r30, r0
 4a6:	21 81       	ldd	r18, Z+1	; 0x01
 4a8:	80 e8       	ldi	r24, 0x80	; 128
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	82 1b       	sub	r24, r18
 4ae:	91 09       	sbc	r25, r1
 4b0:	9b bd       	out	0x2b, r25	; 43
 4b2:	8a bd       	out	0x2a, r24	; 42
		index++;
 4b4:	89 e0       	ldi	r24, 0x09	; 9
 4b6:	80 93 a8 00 	sts	0x00A8, r24
 4ba:	57 c0       	rjmp	.+174    	; 0x56a <__vector_4+0x186>
	} else if (index == 9) {
 4bc:	39 30       	cpi	r19, 0x09	; 9
 4be:	39 f4       	brne	.+14     	; 0x4ce <__vector_4+0xea>
		/* cycle completed, reset everything */
		data = 0;
 4c0:	10 92 a9 00 	sts	0x00A9, r1
		index = 0;
 4c4:	10 92 a8 00 	sts	0x00A8, r1
		/* immediately restart */
		OCR1A = 0;
 4c8:	1b bc       	out	0x2b, r1	; 43
 4ca:	1a bc       	out	0x2a, r1	; 42
 4cc:	4e c0       	rjmp	.+156    	; 0x56a <__vector_4+0x186>
		/* DON'T increase the index counter ! */
	} else {
		/* turn on the LED we deciced to turn on in the last invocation */
		data |= _BV( (*sorted[read_from_this][(index - 1)]).number );
 4ce:	e0 91 a2 00 	lds	r30, 0x00A2
 4d2:	43 2f       	mov	r20, r19
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	ba 01       	movw	r22, r20
 4d8:	61 50       	subi	r22, 0x01	; 1
 4da:	70 40       	sbci	r23, 0x00	; 0
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	23 e0       	ldi	r18, 0x03	; 3
 4e0:	ee 0f       	add	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	2a 95       	dec	r18
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <__vector_4+0xfc>
 4e8:	e6 0f       	add	r30, r22
 4ea:	f7 1f       	adc	r31, r23
 4ec:	ee 0f       	add	r30, r30
 4ee:	ff 1f       	adc	r31, r31
 4f0:	ee 57       	subi	r30, 0x7E	; 126
 4f2:	ff 4f       	sbci	r31, 0xFF	; 255
 4f4:	01 90       	ld	r0, Z+
 4f6:	f0 81       	ld	r31, Z
 4f8:	e0 2d       	mov	r30, r0
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	00 80       	ld	r0, Z
 500:	02 c0       	rjmp	.+4      	; 0x506 <__vector_4+0x122>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	0a 94       	dec	r0
 508:	e2 f7       	brpl	.-8      	; 0x502 <__vector_4+0x11e>
 50a:	20 91 a9 00 	lds	r18, 0x00A9
 50e:	28 2b       	or	r18, r24
 510:	20 93 a9 00 	sts	0x00A9, r18
		/* calculate when to run the next time and turn on the next LED */
		OCR1A =
		    (uint16_t) ( (*sorted[read_from_this][index]).dutycycle - (*sorted[read_from_this][(index - 1)]).dutycycle );
 514:	e0 91 a2 00 	lds	r30, 0x00A2
 518:	a0 91 a2 00 	lds	r26, 0x00A2
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	ee 0f       	add	r30, r30
 522:	ff 1f       	adc	r31, r31
 524:	8a 95       	dec	r24
 526:	e1 f7       	brne	.-8      	; 0x520 <__vector_4+0x13c>
 528:	e4 0f       	add	r30, r20
 52a:	f5 1f       	adc	r31, r21
 52c:	ee 0f       	add	r30, r30
 52e:	ff 1f       	adc	r31, r31
 530:	ee 57       	subi	r30, 0x7E	; 126
 532:	ff 4f       	sbci	r31, 0xFF	; 255
 534:	01 90       	ld	r0, Z+
 536:	f0 81       	ld	r31, Z
 538:	e0 2d       	mov	r30, r0
 53a:	81 81       	ldd	r24, Z+1	; 0x01
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	e3 e0       	ldi	r30, 0x03	; 3
 542:	aa 0f       	add	r26, r26
 544:	bb 1f       	adc	r27, r27
 546:	ea 95       	dec	r30
 548:	e1 f7       	brne	.-8      	; 0x542 <__vector_4+0x15e>
 54a:	a6 0f       	add	r26, r22
 54c:	b7 1f       	adc	r27, r23
 54e:	aa 0f       	add	r26, r26
 550:	bb 1f       	adc	r27, r27
 552:	ae 57       	subi	r26, 0x7E	; 126
 554:	bf 4f       	sbci	r27, 0xFF	; 255
 556:	ed 91       	ld	r30, X+
 558:	fc 91       	ld	r31, X
 55a:	21 81       	ldd	r18, Z+1	; 0x01
 55c:	82 1b       	sub	r24, r18
 55e:	91 09       	sbc	r25, r1
 560:	9b bd       	out	0x2b, r25	; 43
 562:	8a bd       	out	0x2a, r24	; 42
		index++;
 564:	3f 5f       	subi	r19, 0xFF	; 255
 566:	30 93 a8 00 	sts	0x00A8, r19
	}

	__LATCH_LOW;
 56a:	c4 98       	cbi	0x18, 4	; 24
	spi_transfer(data);
 56c:	80 91 a9 00 	lds	r24, 0x00A9
Functions dealing with hardware specific jobs / settings
*/

static inline uint8_t spi_transfer(uint8_t data)
{
	USIDR = data;
 570:	8f b9       	out	0x0f, r24	; 15
	USISR = _BV(USIOIF);	// clear flag
 572:	80 e4       	ldi	r24, 0x40	; 64
 574:	8e b9       	out	0x0e, r24	; 14

	while ((USISR & _BV(USIOIF)) == 0) {
		USICR =
		    (1 << USIWM0) | (1 << USICS1) | (1 << USICLK) | (1 <<
								     USITC);
 576:	8b e1       	ldi	r24, 0x1B	; 27
 578:	01 c0       	rjmp	.+2      	; 0x57c <__vector_4+0x198>
 57a:	8d b9       	out	0x0d, r24	; 13
static inline uint8_t spi_transfer(uint8_t data)
{
	USIDR = data;
	USISR = _BV(USIOIF);	// clear flag

	while ((USISR & _BV(USIOIF)) == 0) {
 57c:	76 9b       	sbis	0x0e, 6	; 14
 57e:	fd cf       	rjmp	.-6      	; 0x57a <__vector_4+0x196>
		USICR =
		    (1 << USIWM0) | (1 << USICS1) | (1 << USICLK) | (1 <<
								     USITC);
	}
	return USIDR;
 580:	8f b1       	in	r24, 0x0f	; 15
		index++;
	}

	__LATCH_LOW;
	spi_transfer(data);
	__LATCH_HIGH;
 582:	c4 9a       	sbi	0x18, 4	; 24

	__DISPLAY_ON;
 584:	c2 98       	cbi	0x18, 2	; 24
	__LED0_OFF;
 586:	c0 98       	cbi	0x18, 0	; 24
}
 588:	ff 91       	pop	r31
 58a:	ef 91       	pop	r30
 58c:	bf 91       	pop	r27
 58e:	af 91       	pop	r26
 590:	9f 91       	pop	r25
 592:	8f 91       	pop	r24
 594:	7f 91       	pop	r23
 596:	6f 91       	pop	r22
 598:	5f 91       	pop	r21
 59a:	4f 91       	pop	r20
 59c:	3f 91       	pop	r19
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <_exit>:
 5aa:	f8 94       	cli

000005ac <__stop_program>:
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <__stop_program>
